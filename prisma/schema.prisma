generator client {
  provider = "prisma-client-js"
  directUrl = env("DIRECT_URL")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
   directUrl = env("DIRECT_URL")
}

model Alert {
  id         String    @id @default(uuid())
  websiteId  String
  message    String
  createdAt  DateTime  @default(now())
  resolvedAt DateTime?
  Website    Website   @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}

model Check {
  id           String   @id @default(uuid())
  status       Boolean
  responseTime Int?
  statusCode   Int?
  websiteId    String
  errorMessage String?
  errorType    String?
  checkedAt    DateTime @default(now())
  headers      Json?
  contentSize  Int?
  sslValid     Boolean?
  dnsTime      Int?
  connectTime  Int?
  transferTime Int?
  Website      Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}

model Project {
  id        String    @id
  name      String
  userId    String
  createdAt DateTime  @default(now())
  status    String    @default("offline")
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Setting   Setting?
  Website   Website[]
}

model Setting {
  id         String   @id
  projectId  String   @unique
  status     Boolean  @default(true)
  interval   Int      @default(300)
  notifyType String   @default("email")
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  Project   Project[]
}

model Website {
  id        String   @id
  url       String
  projectId String
  createdAt DateTime @default(now())
  Alert     Alert[]
  Check     Check[]
  UptimeLog UptimeLog[]
  PerformanceMetric PerformanceMetric[]
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model UptimeLog {
  id        String   @id @default(uuid())
  websiteId String
  date      DateTime
  uptime    Float
  downtime  Float
  checks    Int
  failures  Int
  avgResponseTime Float
  Website         Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  }

model PerformanceMetric {
  id        String   @id @default(uuid())
  websiteId String
  timestamp DateTime @default(now())
  responseTime Int
  statusCode Int
  contentSize Int?
  sslValid  Boolean?
  dnsTime   Int?
  connectTime Int?
  transferTime Int?
  Website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}
